// https://github.com/grafana/agent-configurator

logging {
	level  = "warn"
	format = "logfmt"
}

tracing {
	sampling_fraction = 0.1
	write_to          = [otelcol.processor.batch.containers.input]
}

module.file "docker_compose" {
	filename = env("AGENT_CONFIG_FOLDER") + "/modules/docker_compose.river"
}

discovery.docker "containers" {
	host = "unix:///var/run/docker.sock"

	filter {
		name   = "status"
		values = ["running"]
	}
}

discovery.relabel "containers" {
	targets = discovery.docker.containers.targets

	// filter by service name
	rule {
		source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
		action        = "keep"
		regex         = "(agent|mimir|grafana|loki|loki-.*|tempo|pyroscope)"
	}

	rule {
		source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
		regex         = "(.*)"
		replacement   = "monitoring-system/$1"
		target_label  = "job"
	}

	rule {
		source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
		regex         = "(.*)"
		target_label  = "pod"
	}

	rule {
		source_labels = ["__meta_docker_container_name"]
		regex         = "/(.*)"
		target_label  = "container"
	}
}

/********************************************
 * Metrics
 ********************************************/

prometheus.exporter.unix "containers" {
	set_collectors     = ["cpu"]
	disable_collectors = ["diskstats", "mdadm", "textfile", "hwmon"]
}

prometheus.scrape "integrations" {
	targets = concat(
		prometheus.exporter.unix.containers.targets,
	)
	scrape_interval = "15s"

	clustering {
		enabled = true
	}

	forward_to = [prometheus.relabel.integrations.receiver]
}

prometheus.scrape "containers" {
	targets         = discovery.relabel.containers.output
	scrape_interval = "15s"

	clustering {
		enabled = true
	}

	forward_to = [module.file.docker_compose.exports.metrics_receiver]
}

prometheus.scrape "minio" {
	targets = [{"__address__" = "minio:9000", "job" = "monitoring-system/minio"}]

	scrape_interval = "15s"
	metrics_path    = "/minio/v2/metrics/cluster"

	forward_to = [prometheus.relabel.integrations.receiver]
}

prometheus.relabel "integrations" {
	rule {
		source_labels = ["job"]
		regex         = "(integrations|monitoring-system)/(.*)"
		target_label  = "pod"
		replacement   = "${2}"
	}

	rule {
		source_labels = ["job"]
		regex         = "(integrations|monitoring-system)/(.*)"
		target_label  = "container"
		replacement   = "${2}"
	}

	forward_to = [module.file.docker_compose.exports.metrics_receiver]
}

/********************************************
 * Logs
 ********************************************/

loki.source.docker "containers" {
	host          = "unix:///var/run/docker.sock"
	targets       = discovery.relabel.containers.output
	relabel_rules = discovery.relabel.containers.rules
	forward_to    = [loki.process.containers.receiver]
}

loki.process "containers" {
	forward_to = [module.file.docker_compose.exports.logs_receiver]

	stage.drop {
		longer_than = "8KB"
		older_than  = "12h"
	}

	stage.tenant {
		value = "anonymous"
	}
}

/********************************************
 * Otelcol for Metrics Logs Traces
 ********************************************/

otelcol.receiver.otlp "containers" {
	grpc {
		endpoint = "0.0.0.0:4317"
	}

	http {
		endpoint = "0.0.0.0:4318"
	}

	output {
		metrics = [otelcol.processor.batch.containers.input]
		logs    = [otelcol.processor.batch.containers.input]
		traces  = [otelcol.processor.batch.containers.input]
	}
}

otelcol.processor.batch "containers" {
	output {
		metrics = [otelcol.processor.memory_limiter.containers.input]
		logs    = [otelcol.processor.memory_limiter.containers.input]
		traces  = [otelcol.processor.memory_limiter.containers.input]
	}
}

otelcol.processor.memory_limiter "containers" {
	check_interval = "1s"
	limit          = "256MiB"

	output {
		metrics = [otelcol.exporter.prometheus.containers.input]
		logs    = [otelcol.exporter.loki.containers.input]
		traces  = [module.file.docker_compose.exports.traces_receiver]
	}
}

otelcol.exporter.prometheus "containers" {
	forward_to = [module.file.docker_compose.exports.metrics_receiver]
}

otelcol.exporter.loki "containers" {
	forward_to = [module.file.docker_compose.exports.logs_receiver]
}

/********************************************
 * Profiles
 ********************************************/

pyroscope.scrape "containers" {
	targets = [
		{"__address__" = "grafana:6060", "service_name" = "grafana"},
	]

	profiling_config {
		profile.fgprof {
			enabled = true
		}
	}

	forward_to = [module.file.docker_compose.exports.profiles_receiver]
}
