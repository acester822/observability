apiVersion: v1
data:
  agent-cluster-node.json: |-
    {
          "annotations": {
             "list": [
                {
                   "datasource": "$loki_datasource",
                   "enable": true,
                   "expr": "{cluster=\"$cluster\", container=\"kube-diff-logger\"} | json | namespace_extracted=\"grafana-agent\" | name_extracted=~\"grafana-agent.*\"",
                   "iconColor": "rgba(0, 211, 255, 1)",
                   "instant": false,
                   "name": "Deployments",
                   "titleFormat": "{{cluster}}/{{namespace}}"
                }
             ]
          },
          "links": [
             {
                "icon": "doc",
                "targetBlank": true,
                "title": "Documentation",
                "tooltip": "Clustering documentation",
                "type": "link",
                "url": "https://grafana.com/docs/agent/latest/flow/reference/cli/run/#clustered-mode-experimental"
             },
             {
                "asDropdown": true,
                "icon": "external link",
                "includeVars": true,
                "keepTime": true,
                "tags": [
                   "grafana-agent-flow-mixin"
                ],
                "targetBlank": false,
                "title": "Dashboards",
                "type": "dashboards"
             }
          ],
          "panels": [
             {
                "datasource": "${datasource}",
                "gridPos": {
                   "h": 1,
                   "w": 24,
                   "x": 0,
                   "y": 0
                },
                "title": "Node Info",
                "type": "row"
             },
             {
                "datasource": "${datasource}",
                "description": "Information about a specific cluster node.\n\n* Lamport clock time: The observed Lamport time on the specific node's clock used to provide partial ordering around gossip messages. Nodes should ideally be observing roughly the same time, meaning they are up-to-date on the cluster state. If a node is falling behind, it means that it has not recently processed the same number of messages and may have an outdated view of its peers.\n\n* Internal cluster state observers: The number of Observer functions that are registered to run whenever the node detects a cluster change.\n\n* Gossip health score: A health score assigned to this node by the memberlist implementation. The lower, the better.\n\n* Gossip protocol version: The protocol version used by nodes to communicate with one another. It should match across all nodes.\n",
                "gridPos": {
                   "h": 8,
                   "w": 12,
                   "x": 0,
                   "y": 1
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(cluster_node_lamport_time{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"})",
                      "format": "table",
                      "instant": true,
                      "legendFormat": "__auto",
                      "range": false,
                      "refId": "Lamport clock time"
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(cluster_node_update_observers{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"})",
                      "format": "table",
                      "instant": true,
                      "legendFormat": "__auto",
                      "range": false,
                      "refId": "Internal cluster state observers"
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(cluster_node_gossip_health_score{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"})",
                      "format": "table",
                      "instant": true,
                      "legendFormat": "__auto",
                      "range": false,
                      "refId": "Gossip health score"
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(cluster_node_gossip_proto_version{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"})",
                      "format": "table",
                      "instant": true,
                      "legendFormat": "__auto",
                      "range": false,
                      "refId": "Gossip protocol version"
                   }
                ],
                "title": "Node Info",
                "transformations": [
                   {
                      "id": "renameByRegex",
                      "options": {
                         "regex": "Value #(.*)",
                         "renamePattern": "$1"
                      }
                   },
                   {
                      "id": "reduce",
                      "options": { }
                   },
                   {
                      "id": "organize",
                      "options": {
                         "excludeByName": { },
                         "indexByName": { },
                         "renameByName": {
                            "Field": "Metric",
                            "Max": "Value"
                         }
                      }
                   }
                ],
                "type": "table"
             },
             {
                "datasource": "${datasource}",
                "gridPos": {
                   "h": 8,
                   "w": 12,
                   "x": 12,
                   "y": 1
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "rate(cluster_node_gossip_received_events_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])",
                      "instant": false,
                      "legendFormat": "{{event}}",
                      "range": true
                   }
                ],
                "title": "Gossip ops/s",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Known peers to the node (including the local node).\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "suffix:peers"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 12,
                   "x": 0,
                   "y": 9
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(cluster_node_peers{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"})",
                      "instant": false,
                      "legendFormat": "__auto",
                      "range": true
                   }
                ],
                "title": "Known peers",
                "type": "stat"
             },
             {
                "datasource": "${datasource}",
                "description": "Known peers to the node by state (including the local node).\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "suffix:nodes"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 12,
                   "x": 12,
                   "y": 9
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "cluster_node_peers{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}",
                      "instant": false,
                      "legendFormat": "{{state}}",
                      "range": true
                   }
                ],
                "title": "Peers by state",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "gridPos": {
                   "h": 1,
                   "w": 24,
                   "x": 0,
                   "y": 17
                },
                "title": "Gossip Transport",
                "type": "row"
             },
             {
                "datasource": "${datasource}",
                "fieldConfig": {
                   "defaults": {
                      "custom": {
                         "axisCenteredZero": true
                      },
                      "unit": "Bps"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 8,
                   "x": 0,
                   "y": 18
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "rate(cluster_transport_rx_bytes_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])",
                      "instant": false,
                      "legendFormat": "rx",
                      "range": true
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "-1 * rate(cluster_transport_tx_bytes_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])",
                      "instant": false,
                      "legendFormat": "tx",
                      "range": true
                   }
                ],
                "title": "Transport bandwidth",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "fieldConfig": {
                   "defaults": {
                      "unit": "percentunit"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 8,
                   "x": 8,
                   "y": 18
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "1 - (\nrate(cluster_transport_tx_packets_failed_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]) /\nrate(cluster_transport_tx_packets_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n)\n",
                      "instant": false,
                      "legendFormat": "Tx success %",
                      "range": true
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "1 - (\n  rate(cluster_transport_rx_packets_failed_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]) /\n  rate(cluster_transport_rx_packets_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n  )\n",
                      "instant": false,
                      "legendFormat": "Rx success %",
                      "range": true
                   }
                ],
                "title": "Packet write success rate",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "The number of packets enqueued currently to be decoded or encoded and sent during communication with other nodes.\n\nThe incoming and outgoing packet queue should be as empty as possible; a growing queue means that the Agent cannot keep up with the number of messages required to have all nodes informed of cluster changes, and the nodes may not converge in a timely fashion.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "pkts"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 8,
                   "x": 16,
                   "y": 18
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "cluster_transport_tx_packet_queue_length{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}",
                      "instant": false,
                      "legendFormat": "tx queue",
                      "range": true
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "cluster_transport_rx_packet_queue_length{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}",
                      "instant": false,
                      "legendFormat": "rx queue",
                      "range": true
                   }
                ],
                "title": "Pending packet queue",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "fieldConfig": {
                   "defaults": {
                      "custom": {
                         "axisCenteredZero": true
                      },
                      "unit": "Bps"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 8,
                   "x": 0,
                   "y": 26
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "rate(cluster_transport_stream_rx_bytes_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])",
                      "instant": false,
                      "legendFormat": "rx",
                      "range": true
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "-1 * rate(cluster_transport_stream_tx_bytes_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])",
                      "instant": false,
                      "legendFormat": "tx",
                      "range": true
                   }
                ],
                "title": "Stream bandwidth",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "fieldConfig": {
                   "defaults": {
                      "unit": "percentunit"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 8,
                   "x": 8,
                   "y": 26
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "1 - (\n  rate(cluster_transport_stream_tx_packets_failed_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]) /\n  rate(cluster_transport_stream_tx_packets_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n  )\n",
                      "instant": false,
                      "legendFormat": "Tx success %",
                      "range": true
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "1 - (\n  rate(cluster_transport_stream_rx_packets_failed_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]) /\n  rate(cluster_transport_stream_rx_packets_total{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval])\n  )\n",
                      "instant": false,
                      "legendFormat": "Rx success %",
                      "range": true
                   }
                ],
                "title": "Stream write success rate",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "The number of open connections from this node to its peers.\n\nEach node picks up a subset of its peers to continuously gossip messages around cluster status using streaming HTTP/2 connections. This panel can be used to detect networking failures that result in cluster communication being disrupted and convergence taking longer than expected or outright failing.\n",
                "gridPos": {
                   "h": 8,
                   "w": 8,
                   "x": 16,
                   "y": 26
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "cluster_transport_streams{instance=\"$instance\", cluster=\"$cluster\", namespace=\"$namespace\"}",
                      "instant": false,
                      "legendFormat": "Open streams",
                      "range": true
                   }
                ],
                "title": "Open transport streams",
                "type": "timeseries"
             }
          ],
          "refresh": "10s",
          "schemaVersion": 36,
          "tags": [
             "grafana-agent-flow-mixin"
          ],
          "templating": {
             "list": [
                {
                   "label": "Data Source",
                   "name": "datasource",
                   "query": "prometheus",
                   "refresh": 1,
                   "sort": 2,
                   "type": "datasource"
                },
                {
                   "label": "Loki Data Source",
                   "name": "loki_datasource",
                   "query": "loki",
                   "refresh": 1,
                   "sort": 2,
                   "type": "datasource"
                },
                {
                   "datasource": "${datasource}",
                   "label": "cluster",
                   "name": "cluster",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components, cluster)\n",
                      "refId": "cluster"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                },
                {
                   "datasource": "${datasource}",
                   "label": "namespace",
                   "name": "namespace",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components{cluster=\"$cluster\"}, namespace)\n",
                      "refId": "namespace"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                },
                {
                   "datasource": "${datasource}",
                   "label": "instance",
                   "name": "instance",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components{cluster=\"$cluster\", namespace=\"$namespace\"}, instance)\n",
                      "refId": "instance"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                }
             ]
          },
          "time": {
             "from": "now-1h",
             "to": "now"
          },
          "timepicker": {
             "refresh_intervals": [
                "5s",
                "10s",
                "30s",
                "1m",
                "5m",
                "15m",
                "30m",
                "1h",
                "2h",
                "1d"
             ],
             "time_options": [
                "5m",
                "15m",
                "1h",
                "6h",
                "12h",
                "24h",
                "2d",
                "7d",
                "30d",
                "90d"
             ]
          },
          "timezone": "utc",
          "title": "Grafana Agent Flow / Cluster Node",
          "uid": "dd370cd333b2d9258435fb1b5a20a89b"
       }
kind: ConfigMap
metadata:
  annotations:
    grafana_dashboard_folder: /dashboards/Agent Flow Mixin
  labels:
    grafana_dashboard: "1"
  name: agent-cluster-node.json
  namespace: monitoring-system
---
apiVersion: v1
data:
  agent-cluster-overview.json: |-
    {
          "annotations": {
             "list": [
                {
                   "datasource": "$loki_datasource",
                   "enable": true,
                   "expr": "{cluster=\"$cluster\", container=\"kube-diff-logger\"} | json | namespace_extracted=\"grafana-agent\" | name_extracted=~\"grafana-agent.*\"",
                   "iconColor": "rgba(0, 211, 255, 1)",
                   "instant": false,
                   "name": "Deployments",
                   "titleFormat": "{{cluster}}/{{namespace}}"
                }
             ]
          },
          "links": [
             {
                "icon": "doc",
                "targetBlank": true,
                "title": "Documentation",
                "tooltip": "Clustering documentation",
                "type": "link",
                "url": "https://grafana.com/docs/agent/latest/flow/reference/cli/run/#clustered-mode-experimental"
             },
             {
                "asDropdown": true,
                "icon": "external link",
                "includeVars": true,
                "keepTime": true,
                "tags": [
                   "grafana-agent-flow-mixin"
                ],
                "targetBlank": false,
                "title": "Dashboards",
                "type": "dashboards"
             }
          ],
          "panels": [
             {
                "datasource": "${datasource}",
                "gridPos": {
                   "h": 9,
                   "w": 8,
                   "x": 0,
                   "y": 0
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "count(cluster_node_info{cluster=\"$cluster\", namespace=\"$namespace\"})",
                      "instant": true,
                      "legendFormat": "__auto",
                      "range": false
                   }
                ],
                "title": "Nodes",
                "type": "stat"
             },
             {
                "datasource": "${datasource}",
                "description": "Nodes info.\n",
                "fieldConfig": {
                   "overrides": [
                      {
                         "matcher": {
                            "id": "byName",
                            "options": "Dashboard"
                         },
                         "properties": [
                            {
                               "id": "mappings",
                               "value": [
                                  {
                                     "options": {
                                        "1": {
                                           "index": 0,
                                           "text": "Link"
                                        }
                                     },
                                     "type": "value"
                                  }
                               ]
                            },
                            {
                               "id": "links",
                               "value": [
                                  {
                                     "targetBlank": false,
                                     "title": "Detail dashboard for node",
                                     "url": "/d/dd370cd333b2d9258435fb1b5a20a89b/grafana-agent-flow-cluster-node?var-instance=${__data.fields.instance}&var-datasource=${datasource}&var-loki_datasource=${loki_datasource}&var-cluster=${cluster}&var-namespace=${namespace}"
                                  }
                               ]
                            }
                         ]
                      }
                   ]
                },
                "gridPos": {
                   "h": 9,
                   "w": 16,
                   "x": 8,
                   "y": 0
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "cluster_node_info{cluster=\"$cluster\", namespace=\"$namespace\"}",
                      "format": "table",
                      "instant": true,
                      "legendFormat": "__auto",
                      "range": false
                   }
                ],
                "title": "Node table",
                "transformations": [
                   {
                      "id": "organize",
                      "options": {
                         "excludeByName": {
                            "Time": true,
                            "Value": false,
                            "__name__": true,
                            "cluster": true,
                            "namespace": true,
                            "state": false
                         },
                         "indexByName": { },
                         "renameByName": {
                            "Value": "Dashboard",
                            "instance": "",
                            "state": ""
                         }
                      }
                   }
                ],
                "type": "table"
             },
             {
                "datasource": "${datasource}",
                "description": "Whether the cluster state has converged.\n\nIt is normal for the cluster state to be diverged briefly as gossip events propagate. It is not normal for the cluster state to be diverged for a long period of time.\n\nThis will show one of the following:\n\n* Converged: Nodes are aware of all other nodes, with the correct states.\n* Not converged: A subset of nodes aren't aware of their peers, or don't have an updated view of peer states.\n",
                "fieldConfig": {
                   "defaults": {
                      "mappings": [
                         {
                            "options": {
                               "1": {
                                  "color": "red",
                                  "index": 1,
                                  "text": "Not converged"
                               }
                            },
                            "type": "value"
                         },
                         {
                            "options": {
                               "match": "null",
                               "result": {
                                  "color": "green",
                                  "index": 0,
                                  "text": "Converged"
                               }
                            },
                            "type": "special"
                         }
                      ],
                      "unit": "suffix:nodes"
                   }
                },
                "gridPos": {
                   "h": 9,
                   "w": 8,
                   "x": 0,
                   "y": 9
                },
                "options": {
                   "colorMode": "background",
                   "graphMode": "none",
                   "justifyMode": "auto",
                   "orientation": "auto",
                   "reduceOptions": {
                      "calcs": [
                         "lastNotNull"
                      ],
                      "fields": "",
                      "values": false
                   },
                   "textMode": "auto"
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "clamp((\n  sum(stddev by (state) (cluster_node_peers{cluster=\"$cluster\", namespace=\"$namespace\"}) != 0) or\n  (sum(abs(sum without (state) (cluster_node_peers{cluster=\"$cluster\", namespace=\"$namespace\"})) - scalar(count(cluster_node_info{cluster=\"$cluster\", namespace=\"$namespace\"})) != 0))\n  ),\n  1, 1\n)\n",
                      "format": "time_series",
                      "instant": true,
                      "legendFormat": "__auto",
                      "range": false
                   }
                ],
                "title": "Convergance state",
                "type": "stat"
             },
             {
                "datasource": "${datasource}",
                "fieldConfig": {
                   "defaults": {
                      "custom": {
                         "fillOpacity": 80,
                         "spanNulls": true
                      },
                      "mappings": [
                         {
                            "options": {
                               "0": {
                                  "color": "green",
                                  "text": "Yes"
                               }
                            },
                            "type": "value"
                         },
                         {
                            "options": {
                               "1": {
                                  "color": "red",
                                  "text": "No"
                               }
                            },
                            "type": "value"
                         }
                      ],
                      "max": 1,
                      "noValue": 0
                   }
                },
                "gridPos": {
                   "h": 9,
                   "w": 16,
                   "x": 8,
                   "y": 9
                },
                "options": {
                   "mergeValues": true
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "ceil(clamp((\n  sum(stddev by (state) (cluster_node_peers{cluster=\"$cluster\", namespace=\"$namespace\"})) or\n  (sum(abs(sum without (state) (cluster_node_peers{cluster=\"$cluster\", namespace=\"$namespace\"})) - scalar(count(cluster_node_info{cluster=\"$cluster\", namespace=\"$namespace\"}))))\n  ),\n  0, 1\n))\n",
                      "instant": false,
                      "legendFormat": "Converged",
                      "range": true
                   }
                ],
                "title": "Convergance state timeline",
                "type": "state-timeline"
             }
          ],
          "refresh": "10s",
          "schemaVersion": 36,
          "tags": [
             "grafana-agent-flow-mixin"
          ],
          "templating": {
             "list": [
                {
                   "label": "Data Source",
                   "name": "datasource",
                   "query": "prometheus",
                   "refresh": 1,
                   "sort": 2,
                   "type": "datasource"
                },
                {
                   "label": "Loki Data Source",
                   "name": "loki_datasource",
                   "query": "loki",
                   "refresh": 1,
                   "sort": 2,
                   "type": "datasource"
                },
                {
                   "datasource": "${datasource}",
                   "label": "cluster",
                   "name": "cluster",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components, cluster)\n",
                      "refId": "cluster"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                },
                {
                   "datasource": "${datasource}",
                   "label": "namespace",
                   "name": "namespace",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components{cluster=\"$cluster\"}, namespace)\n",
                      "refId": "namespace"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                }
             ]
          },
          "time": {
             "from": "now-1h",
             "to": "now"
          },
          "timepicker": {
             "refresh_intervals": [
                "5s",
                "10s",
                "30s",
                "1m",
                "5m",
                "15m",
                "30m",
                "1h",
                "2h",
                "1d"
             ],
             "time_options": [
                "5m",
                "15m",
                "1h",
                "6h",
                "12h",
                "24h",
                "2d",
                "7d",
                "30d",
                "90d"
             ]
          },
          "timezone": "utc",
          "title": "Grafana Agent Flow / Cluster Overview",
          "uid": "7e07f9c975fcfc2a6e120a95f579f843"
       }
kind: ConfigMap
metadata:
  annotations:
    grafana_dashboard_folder: /dashboards/Agent Flow Mixin
  labels:
    grafana_dashboard: "1"
  name: agent-cluster-overview.json
  namespace: monitoring-system
---
apiVersion: v1
data:
  agent-flow-controller.json: |-
    {
          "annotations": {
             "list": [
                {
                   "datasource": "$loki_datasource",
                   "enable": true,
                   "expr": "{cluster=\"$cluster\", container=\"kube-diff-logger\"} | json | namespace_extracted=\"grafana-agent\" | name_extracted=~\"grafana-agent.*\"",
                   "iconColor": "rgba(0, 211, 255, 1)",
                   "instant": false,
                   "name": "Deployments",
                   "titleFormat": "{{cluster}}/{{namespace}}"
                }
             ]
          },
          "links": [
             {
                "icon": "doc",
                "targetBlank": true,
                "title": "Documentation",
                "tooltip": "Component controller documentation",
                "type": "link",
                "url": "https://grafana.com/docs/agent/latest/flow/concepts/component_controller/"
             },
             {
                "asDropdown": true,
                "icon": "external link",
                "includeVars": true,
                "keepTime": true,
                "tags": [
                   "grafana-agent-flow-mixin"
                ],
                "targetBlank": false,
                "title": "Dashboards",
                "type": "dashboards"
             }
          ],
          "panels": [
             {
                "datasource": "${datasource}",
                "description": "The number of Grafana Agent Flow instances whose metrics are being sent and reported.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "agents"
                   }
                },
                "gridPos": {
                   "h": 4,
                   "w": 10,
                   "x": 0,
                   "y": 0
                },
                "options": {
                   "colorMode": "none",
                   "graphMode": "none"
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "count(agent_component_controller_evaluating{cluster=\"$cluster\", namespace=\"$namespace\"})",
                      "instant": false,
                      "legendFormat": "__auto",
                      "range": true
                   }
                ],
                "title": "Running agents",
                "type": "stat"
             },
             {
                "datasource": "${datasource}",
                "description": "The number of running components across all running agents.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "components"
                   }
                },
                "gridPos": {
                   "h": 4,
                   "w": 10,
                   "x": 0,
                   "y": 4
                },
                "options": {
                   "colorMode": "none",
                   "graphMode": "none"
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(agent_component_controller_running_components{cluster=\"$cluster\", namespace=\"$namespace\"})",
                      "instant": false,
                      "legendFormat": "__auto",
                      "range": true
                   }
                ],
                "title": "Running components",
                "type": "stat"
             },
             {
                "datasource": "${datasource}",
                "description": "The percentage of components which are in a healthy state.\n",
                "fieldConfig": {
                   "defaults": {
                      "max": 1,
                      "min": 0,
                      "noValue": "No components",
                      "unit": "percentunit"
                   }
                },
                "gridPos": {
                   "h": 4,
                   "w": 10,
                   "x": 0,
                   "y": 8
                },
                "options": {
                   "colorMode": "value",
                   "graphMode": "area",
                   "text": {
                      "valueSize": 80
                   }
                },
                "pluginVersion": "9.0.6",
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(agent_component_controller_running_components{cluster=\"$cluster\", namespace=\"$namespace\",health_type=\"healthy\"}) /\nsum(agent_component_controller_running_components{cluster=\"$cluster\", namespace=\"$namespace\"})\n",
                      "instant": false,
                      "legendFormat": "__auto",
                      "range": true
                   }
                ],
                "title": "Overall component health",
                "type": "stat"
             },
             {
                "datasource": "${datasource}",
                "description": "Breakdown of components by health across all running agents.\n\n* Healthy: components have been evaluated completely and are reporting themselves as healthy.\n* Unhealthy: Components either could not be evaluated or are reporting themselves as unhealthy.\n* Unknown: A component has been created but has not yet been started.\n* Exited: A component has exited. It will not return to the running state.\n\nMore information on a component's health state can be retrieved using\nthe Grafana Agent Flow UI.\n\nNote that components may be in a degraded state even if they report\nthemselves as healthy. Use component-specific dashboards and alerts\nto observe detailed information about the behavior of a component.\n",
                "fieldConfig": {
                   "defaults": {
                      "min": 0,
                      "thresholds": {
                         "mode": "absolute",
                         "steps": [
                            {
                               "color": "green",
                               "value": null
                            }
                         ]
                      }
                   },
                   "overrides": [
                      {
                         "matcher": {
                            "id": "byName",
                            "options": "Unhealthy"
                         },
                         "properties": [
                            {
                               "id": "thresholds",
                               "value": {
                                  "mode": "absolute",
                                  "steps": [
                                     {
                                        "color": "green",
                                        "value": null
                                     },
                                     {
                                        "color": "red",
                                        "value": 1
                                     }
                                  ]
                               }
                            }
                         ]
                      },
                      {
                         "matcher": {
                            "id": "byName",
                            "options": "Unknown"
                         },
                         "properties": [
                            {
                               "id": "thresholds",
                               "value": {
                                  "mode": "absolute",
                                  "steps": [
                                     {
                                        "color": "green",
                                        "value": null
                                     },
                                     {
                                        "color": "blue",
                                        "value": 1
                                     }
                                  ]
                               }
                            }
                         ]
                      },
                      {
                         "matcher": {
                            "id": "byName",
                            "options": "Exited"
                         },
                         "properties": [
                            {
                               "id": "thresholds",
                               "value": {
                                  "mode": "absolute",
                                  "steps": [
                                     {
                                        "color": "green",
                                        "value": null
                                     },
                                     {
                                        "color": "orange",
                                        "value": 1
                                     }
                                  ]
                               }
                            }
                         ]
                      }
                   ]
                },
                "gridPos": {
                   "h": 12,
                   "w": 14,
                   "x": 10,
                   "y": 0
                },
                "options": {
                   "orientation": "vertical",
                   "showUnfilled": true
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(agent_component_controller_running_components{cluster=\"$cluster\", namespace=\"$namespace\", health_type=\"healthy\"}) or vector(0)",
                      "instant": true,
                      "legendFormat": "Healthy",
                      "range": false
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(agent_component_controller_running_components{cluster=\"$cluster\", namespace=\"$namespace\", health_type=\"unhealthy\"}) or vector(0)",
                      "instant": true,
                      "legendFormat": "Unhealthy",
                      "range": false
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(agent_component_controller_running_components{cluster=\"$cluster\", namespace=\"$namespace\", health_type=\"unknown\"}) or vector(0)",
                      "instant": true,
                      "legendFormat": "Unknown",
                      "range": false
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(agent_component_controller_running_components{cluster=\"$cluster\", namespace=\"$namespace\", health_type=\"exited\"}) or vector(0)",
                      "instant": true,
                      "legendFormat": "Exited",
                      "range": false
                   }
                ],
                "title": "Components by health",
                "type": "bargauge"
             },
             {
                "datasource": "${datasource}",
                "description": "The frequency at which components get updated.\n",
                "fieldConfig": {
                   "defaults": {
                      "custom": {
                         "drawStyle": "points",
                         "pointSize": 3
                      },
                      "unit": "ops"
                   }
                },
                "gridPos": {
                   "h": 10,
                   "w": 8,
                   "x": 0,
                   "y": 12
                },
                "options": {
                   "tooltip": {
                      "mode": "multi"
                   }
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum by (instance) (rate(agent_component_evaluation_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))",
                      "instant": false,
                      "legendFormat": "__auto",
                      "range": true
                   }
                ],
                "title": "Component evaluation rate",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "The percentiles for how long it takes to complete component evaluations.\n\nComponent evaluations must complete for components to have the latest\narguments. The longer the evaluations take, the slower it will be to\nreconcile the state of components.\n\nIf evaluation is taking too long, consider sharding your components to\ndeal with smaller amounts of data and reuse data as much as possible.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "s"
                   }
                },
                "gridPos": {
                   "h": 10,
                   "w": 8,
                   "x": 8,
                   "y": 12
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "histogram_quantile(0.99, sum by (le) (rate(agent_component_evaluation_seconds_bucket{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])))",
                      "instant": false,
                      "legendFormat": "99th percentile",
                      "range": true
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "histogram_quantile(0.50, sum by (le) (rate(agent_component_evaluation_seconds_bucket{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])))",
                      "instant": false,
                      "legendFormat": "50th percentile",
                      "range": true
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(rate(agent_component_evaluation_seconds_sum{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval])) /\nsum(rate(agent_component_evaluation_seconds_count{cluster=\"$cluster\",namespace=\"$namespace\"}[$__rate_interval]))\n",
                      "instant": false,
                      "legendFormat": "Average",
                      "range": true
                   }
                ],
                "title": "Component evaluation time",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Detailed histogram view of how long component evaluations take.\n\nThe goal is to design your config so that evaluations take as little\ntime as possible; under 100ms is a good goal.\n",
                "gridPos": {
                   "h": 10,
                   "w": 8,
                   "x": 16,
                   "y": 12
                },
                "maxDataPoints": 30,
                "options": {
                   "calculate": false,
                   "color": {
                      "exponent": 0.5,
                      "fill": "dark-orange",
                      "mode": "scheme",
                      "scale": "exponential",
                      "scheme": "Oranges",
                      "steps": 65
                   },
                   "exemplars": {
                      "color": "rgba(255,0,255,0.7)"
                   },
                   "filterValues": {
                      "le": 1.0000000000000001e-09
                   },
                   "tooltip": {
                      "show": true,
                      "yHistogram": true
                   },
                   "yAxis": {
                      "unit": "s"
                   }
                },
                "pluginVersion": "9.0.6",
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum by (le) (increase(agent_component_evaluation_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))",
                      "format": "heatmap",
                      "instant": false,
                      "legendFormat": "{{le}}",
                      "range": true
                   }
                ],
                "title": "Component evaluation histogram",
                "type": "heatmap"
             },
             {
                "datasource": "${datasource}",
                "description": "Detailed histogram of how long components wait to be evaluated after their dependency is updated.\n\nThe goal is to design your config so that most of the time components do not\nqueue for long; under 10ms is a good goal.\n",
                "gridPos": {
                   "h": 10,
                   "w": 8,
                   "x": 0,
                   "y": 22
                },
                "maxDataPoints": 30,
                "options": {
                   "calculate": false,
                   "color": {
                      "exponent": 0.5,
                      "fill": "dark-orange",
                      "mode": "scheme",
                      "scale": "exponential",
                      "scheme": "Oranges",
                      "steps": 65
                   },
                   "exemplars": {
                      "color": "rgba(255,0,255,0.7)"
                   },
                   "filterValues": {
                      "le": 1.0000000000000001e-09
                   },
                   "tooltip": {
                      "show": true,
                      "yHistogram": true
                   },
                   "yAxis": {
                      "unit": "s"
                   }
                },
                "pluginVersion": "9.0.6",
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum by (le) (increase(agent_component_dependencies_wait_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[$__rate_interval]))",
                      "format": "heatmap",
                      "instant": false,
                      "legendFormat": "{{le}}",
                      "range": true
                   }
                ],
                "title": "Component dependency wait histogram",
                "type": "heatmap"
             }
          ],
          "refresh": "10s",
          "schemaVersion": 36,
          "tags": [
             "grafana-agent-flow-mixin"
          ],
          "templating": {
             "list": [
                {
                   "label": "Data Source",
                   "name": "datasource",
                   "query": "prometheus",
                   "refresh": 1,
                   "sort": 2,
                   "type": "datasource"
                },
                {
                   "label": "Loki Data Source",
                   "name": "loki_datasource",
                   "query": "loki",
                   "refresh": 1,
                   "sort": 2,
                   "type": "datasource"
                },
                {
                   "datasource": "${datasource}",
                   "label": "cluster",
                   "name": "cluster",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components, cluster)\n",
                      "refId": "cluster"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                },
                {
                   "datasource": "${datasource}",
                   "label": "namespace",
                   "name": "namespace",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components{cluster=\"$cluster\"}, namespace)\n",
                      "refId": "namespace"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                }
             ]
          },
          "time": {
             "from": "now-1h",
             "to": "now"
          },
          "timepicker": {
             "refresh_intervals": [
                "5s",
                "10s",
                "30s",
                "1m",
                "5m",
                "15m",
                "30m",
                "1h",
                "2h",
                "1d"
             ],
             "time_options": [
                "5m",
                "15m",
                "1h",
                "6h",
                "12h",
                "24h",
                "2d",
                "7d",
                "30d",
                "90d"
             ]
          },
          "timezone": "utc",
          "title": "Grafana Agent Flow / Controller",
          "uid": "f861e5fef2e795edd5c4c73bee1ba769"
       }
kind: ConfigMap
metadata:
  annotations:
    grafana_dashboard_folder: /dashboards/Agent Flow Mixin
  labels:
    grafana_dashboard: "1"
  name: agent-flow-controller.json
  namespace: monitoring-system
---
apiVersion: v1
data:
  agent-flow-prometheus-remote-write.json: |-
    {
          "annotations": {
             "list": [
                {
                   "datasource": "$loki_datasource",
                   "enable": true,
                   "expr": "{cluster=\"$cluster\", container=\"kube-diff-logger\"} | json | namespace_extracted=\"grafana-agent\" | name_extracted=~\"grafana-agent.*\"",
                   "iconColor": "rgba(0, 211, 255, 1)",
                   "instant": false,
                   "name": "Deployments",
                   "titleFormat": "{{cluster}}/{{namespace}}"
                }
             ]
          },
          "links": [
             {
                "icon": "doc",
                "targetBlank": true,
                "title": "Documentation",
                "tooltip": "Component documentation",
                "type": "link",
                "url": "https://grafana.com/docs/agent/latest/flow/reference/components/prometheus.remote_write/"
             },
             {
                "asDropdown": true,
                "icon": "external link",
                "includeVars": true,
                "keepTime": true,
                "tags": [
                   "grafana-agent-flow-mixin"
                ],
                "targetBlank": false,
                "title": "Dashboards",
                "type": "dashboards"
             }
          ],
          "panels": [
             {
                "datasource": "${datasource}",
                "description": "How far behind prometheus.remote_write from samples recently written\nto the WAL.\n\nEach endpoint prometheus.remote_write is configured to send metrics\nhas its own delay. The time shown here is the sum across all\nendpoints for the given component.\n\nIt is normal for the WAL delay to be within 1-3 scrape intervals. If\nthe WAL delay continues to increase beyond that amount, try\nincreasing the number of maximum shards.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "s"
                   }
                },
                "gridPos": {
                   "h": 10,
                   "w": 6,
                   "x": 0,
                   "y": 0
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum by (instance, component_id) (\n  prometheus_remote_storage_highest_timestamp_in_seconds{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\"}\n  - ignoring(url, remote_name) group_right(instance)\n  prometheus_remote_storage_queue_highest_sent_timestamp_seconds{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"}\n)\n",
                      "instant": false,
                      "legendFormat": "{{instance}} / {{component_id}}",
                      "range": true
                   }
                ],
                "title": "WAL delay",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Rate of data containing samples and metadata sent by\nprometheus.remote_write.\n",
                "fieldConfig": {
                   "defaults": {
                      "custom": {
                         "fillOpacity": 20,
                         "gradientMode": "hue",
                         "stacking": {
                            "mode": "normal"
                         }
                      },
                      "unit": "Bps"
                   }
                },
                "gridPos": {
                   "h": 10,
                   "w": 6,
                   "x": 6,
                   "y": 0
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum without (remote_name, url) (\n    rate(prometheus_remote_storage_bytes_total{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"}[$__rate_interval]) +\n    rate(prometheus_remote_storage_metadata_bytes_total{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"}[$__rate_interval])\n)\n",
                      "instant": false,
                      "legendFormat": "{{instance}} / {{component_id}}",
                      "range": true
                   }
                ],
                "title": "Data write throughput",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Latency of writes to the remote system made by\nprometheus.remote_write.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "s"
                   }
                },
                "gridPos": {
                   "h": 10,
                   "w": 6,
                   "x": 12,
                   "y": 0
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "histogram_quantile(0.99, sum by (le) (\n  rate(prometheus_remote_storage_sent_batch_duration_seconds_bucket{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"}[$__rate_interval])\n))\n",
                      "instant": false,
                      "legendFormat": "99th percentile",
                      "range": true
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "histogram_quantile(0.50, sum by (le) (\n  rate(prometheus_remote_storage_sent_batch_duration_seconds_bucket{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"}[$__rate_interval])\n))\n",
                      "instant": false,
                      "legendFormat": "50th percentile",
                      "range": true
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(rate(prometheus_remote_storage_sent_batch_duration_seconds_sum{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\", component_id=~\"$component\"}[$__rate_interval])) /\nsum(rate(prometheus_remote_storage_sent_batch_duration_seconds_count{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\", component_id=~\"$component\"}[$__rate_interval]))\n",
                      "instant": false,
                      "legendFormat": "Average",
                      "range": true
                   }
                ],
                "title": "Write latency",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Total number of shards which are concurrently sending samples read\nfrom the Write-Ahead Log.\n\nShards are bound to a minimum and maximum, displayed on the graph.\nThe lowest minimum and the highest maximum across all clients is\nshown.\n\nEach client has its own set of shards, minimum shards, and maximum\nshards; filter to a specific URL to display more granular\ninformation.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "none"
                   },
                   "overrides": [
                      {
                         "matcher": {
                            "id": "byName",
                            "options": "Minimum"
                         },
                         "properties": [
                            {
                               "id": "custom.lineStyle",
                               "value": {
                                  "dash": [
                                     10,
                                     15
                                  ],
                                  "fill": "dash"
                               }
                            },
                            {
                               "id": "custom.showPoints",
                               "value": "never"
                            },
                            {
                               "id": "custom.hideFrom",
                               "value": {
                                  "legend": true,
                                  "tooltip": false,
                                  "viz": false
                               }
                            }
                         ]
                      },
                      {
                         "matcher": {
                            "id": "byName",
                            "options": "Maximum"
                         },
                         "properties": [
                            {
                               "id": "custom.lineStyle",
                               "value": {
                                  "dash": [
                                     10,
                                     15
                                  ],
                                  "fill": "dash"
                               }
                            },
                            {
                               "id": "custom.showPoints",
                               "value": "never"
                            },
                            {
                               "id": "custom.hideFrom",
                               "value": {
                                  "legend": true,
                                  "tooltip": false,
                                  "viz": false
                               }
                            }
                         ]
                      }
                   ]
                },
                "gridPos": {
                   "h": 10,
                   "w": 6,
                   "x": 18,
                   "y": 0
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum without (remote_name, url) (\n    prometheus_remote_storage_shards{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"}\n)\n",
                      "instant": false,
                      "legendFormat": "{{instance}} / {{component_id}}",
                      "range": true
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "min (\n    prometheus_remote_storage_shards_min{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"}\n)\n",
                      "instant": false,
                      "legendFormat": "Minimum",
                      "range": true
                   },
                   {
                      "datasource": "${datasource}",
                      "expr": "max (\n    prometheus_remote_storage_shards_max{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"}\n)\n",
                      "instant": false,
                      "legendFormat": "Maximum",
                      "range": true
                   }
                ],
                "title": "Shards",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Total outgoing samples sent by prometheus.remote_write.\n",
                "fieldConfig": {
                   "defaults": {
                      "custom": {
                         "fillOpacity": 20,
                         "gradientMode": "hue",
                         "stacking": {
                            "mode": "normal"
                         }
                      },
                      "unit": "cps"
                   }
                },
                "gridPos": {
                   "h": 10,
                   "w": 8,
                   "x": 0,
                   "y": 10
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum without (url, remote_name) (\n  rate(prometheus_remote_storage_samples_total{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"}[$__rate_interval])\n)\n",
                      "instant": false,
                      "legendFormat": "{{instance}} / {{component_id}}",
                      "range": true
                   }
                ],
                "title": "Sent samples / second",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Rate of samples which prometheus.remote_write could not send due to\nnon-recoverable errors.\n",
                "fieldConfig": {
                   "defaults": {
                      "custom": {
                         "fillOpacity": 20,
                         "gradientMode": "hue",
                         "stacking": {
                            "mode": "normal"
                         }
                      },
                      "unit": "cps"
                   }
                },
                "gridPos": {
                   "h": 10,
                   "w": 8,
                   "x": 8,
                   "y": 10
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum without (url,remote_name) (\n  rate(prometheus_remote_storage_samples_failed_total{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"}[$__rate_interval])\n)\n",
                      "instant": false,
                      "legendFormat": "{{instance}} / {{component_id}}",
                      "range": true
                   }
                ],
                "title": "Failed samples / second",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Rate of samples which prometheus.remote_write attempted to resend\nafter receiving a recoverable error.\n",
                "fieldConfig": {
                   "defaults": {
                      "custom": {
                         "fillOpacity": 20,
                         "gradientMode": "hue",
                         "stacking": {
                            "mode": "normal"
                         }
                      },
                      "unit": "cps"
                   }
                },
                "gridPos": {
                   "h": 10,
                   "w": 8,
                   "x": 16,
                   "y": 10
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum without (url,remote_name) (\n  rate(prometheus_remote_storage_samples_retried_total{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"}[$__rate_interval])\n)\n",
                      "instant": false,
                      "legendFormat": "{{instance}} / {{component_id}}",
                      "range": true
                   }
                ],
                "title": "Retried samples / second",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Total number of active series across all components.\n\nAn \"active series\" is a series that prometheus.remote_write recently\nreceived a sample for. Active series are garbage collected whenever a\ntruncation of the WAL occurs.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "short"
                   }
                },
                "gridPos": {
                   "h": 10,
                   "w": 12,
                   "x": 0,
                   "y": 20
                },
                "options": {
                   "legend": {
                      "showLegend": false
                   }
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "sum(agent_wal_storage_active_series{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"})\n",
                      "instant": false,
                      "legendFormat": "Series",
                      "range": true
                   }
                ],
                "title": "Active series (total)",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Total number of active series which are currently being tracked by\nprometheus.remote_write components.\n\nAn \"active series\" is a series that prometheus.remote_write recently\nreceived a sample for. Active series are garbage collected whenever a\ntruncation of the WAL occurs.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "short"
                   }
                },
                "gridPos": {
                   "h": 10,
                   "w": 12,
                   "x": 12,
                   "y": 20
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "agent_wal_storage_active_series{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\", url=~\"$url\"}\n",
                      "instant": false,
                      "legendFormat": "{{instance}} / {{component_id}}",
                      "range": true
                   }
                ],
                "title": "Active series (by component)",
                "type": "timeseries"
             }
          ],
          "refresh": "10s",
          "schemaVersion": 36,
          "tags": [
             "grafana-agent-flow-mixin"
          ],
          "templating": {
             "list": [
                {
                   "label": "Data Source",
                   "name": "datasource",
                   "query": "prometheus",
                   "refresh": 1,
                   "sort": 2,
                   "type": "datasource"
                },
                {
                   "label": "Loki Data Source",
                   "name": "loki_datasource",
                   "query": "loki",
                   "refresh": 1,
                   "sort": 2,
                   "type": "datasource"
                },
                {
                   "datasource": "${datasource}",
                   "label": "cluster",
                   "name": "cluster",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components, cluster)\n",
                      "refId": "cluster"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                },
                {
                   "datasource": "${datasource}",
                   "label": "namespace",
                   "name": "namespace",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components{cluster=\"$cluster\"}, namespace)\n",
                      "refId": "namespace"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                },
                {
                   "allValue": ".*",
                   "datasource": "${datasource}",
                   "includeAll": true,
                   "label": "instance",
                   "multi": true,
                   "name": "instance",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components{cluster=\"$cluster\", namespace=\"$namespace\"}, instance)\n",
                      "refId": "instance"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                },
                {
                   "allValue": ".*",
                   "datasource": "${datasource}",
                   "includeAll": true,
                   "label": "component",
                   "multi": true,
                   "name": "component",
                   "query": {
                      "query": "label_values(agent_wal_samples_appended_total{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"prometheus\\\\.remote_write\\\\..*\"}, component_id)\n",
                      "refId": "component"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                },
                {
                   "allValue": ".*",
                   "datasource": "${datasource}",
                   "includeAll": true,
                   "label": "url",
                   "multi": true,
                   "name": "url",
                   "query": {
                      "query": "label_values(prometheus_remote_storage_sent_batch_duration_seconds_sum{cluster=\"$cluster\", namespace=\"$namespace\", instance=~\"$instance\", component_id=~\"$component\"}, url)\n",
                      "refId": "url"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                }
             ]
          },
          "time": {
             "from": "now-1h",
             "to": "now"
          },
          "timepicker": {
             "refresh_intervals": [
                "5s",
                "10s",
                "30s",
                "1m",
                "5m",
                "15m",
                "30m",
                "1h",
                "2h",
                "1d"
             ],
             "time_options": [
                "5m",
                "15m",
                "1h",
                "6h",
                "12h",
                "24h",
                "2d",
                "7d",
                "30d",
                "90d"
             ]
          },
          "timezone": "utc",
          "title": "Grafana Agent Flow / prometheus.remote_write",
          "uid": "ee34ffa2d084547d650e1d96a26306aa"
       }
kind: ConfigMap
metadata:
  annotations:
    grafana_dashboard_folder: /dashboards/Agent Flow Mixin
  labels:
    grafana_dashboard: "1"
  name: agent-flow-prometheus-remote-write.json
  namespace: monitoring-system
---
apiVersion: v1
data:
  agent-flow-resources.json: |-
    {
          "annotations": {
             "list": [
                {
                   "datasource": "$loki_datasource",
                   "enable": true,
                   "expr": "{cluster=\"$cluster\", container=\"kube-diff-logger\"} | json | namespace_extracted=\"grafana-agent\" | name_extracted=~\"grafana-agent.*\"",
                   "iconColor": "rgba(0, 211, 255, 1)",
                   "instant": false,
                   "name": "Deployments",
                   "titleFormat": "{{cluster}}/{{namespace}}"
                }
             ]
          },
          "links": [
             {
                "asDropdown": true,
                "icon": "external link",
                "includeVars": true,
                "keepTime": true,
                "tags": [
                   "grafana-agent-flow-mixin"
                ],
                "targetBlank": false,
                "title": "Dashboards",
                "type": "dashboards"
             }
          ],
          "panels": [
             {
                "datasource": "${datasource}",
                "description": "CPU usage of the Grafana Agent process relative to 1 CPU core.\n\nFor example, 100% means using one entire CPU core.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "percentunit"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 12,
                   "x": 0,
                   "y": 0
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "rate(agent_resources_process_cpu_seconds_total{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\"}[$__rate_interval])",
                      "instant": false,
                      "legendFormat": "{{instance}}",
                      "range": true
                   }
                ],
                "title": "CPU usage",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Resident memory size of the Grafana Agent process.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "decbytes"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 12,
                   "x": 12,
                   "y": 0
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "agent_resources_process_resident_memory_bytes{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\"}",
                      "instant": false,
                      "legendFormat": "{{instance}}",
                      "range": true
                   }
                ],
                "title": "Memory (RSS)",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Rate at which the Grafana Agent process performs garbage collections.\n",
                "fieldConfig": {
                   "defaults": {
                      "custom": {
                         "drawStyle": "points",
                         "pointSize": 3
                      },
                      "unit": "ops"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 8,
                   "x": 0,
                   "y": 8
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "rate(go_gc_duration_seconds_count{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\"}[5m])\nand on(instance)\nagent_build_info{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\"}\n",
                      "instant": false,
                      "legendFormat": "{{instance}}",
                      "range": true
                   }
                ],
                "title": "Garbage collections",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Number of goroutines which are running in parallel. An infinitely\ngrowing number of these indicates a goroutine leak.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "none"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 8,
                   "x": 8,
                   "y": 8
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "go_goroutines{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\"}\nand on(instance)\nagent_build_info{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\"}\n",
                      "instant": false,
                      "legendFormat": "{{instance}}",
                      "range": true
                   }
                ],
                "title": "Goroutines",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Heap memory currently in use by the Grafana Agent process.\n",
                "fieldConfig": {
                   "defaults": {
                      "unit": "decbytes"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 8,
                   "x": 16,
                   "y": 8
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "go_memstats_heap_inuse_bytes{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\"}\nand on(instance)\nagent_build_info{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\"}\n",
                      "instant": false,
                      "legendFormat": "{{instance}}",
                      "range": true
                   }
                ],
                "title": "Memory (heap inuse)",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Rate of data received across all network interfaces for the machine\nGrafana Agent is running on.\n\nData shown here is across all running processes and not exclusive to\nthe running Grafana Agent process.\n",
                "fieldConfig": {
                   "defaults": {
                      "custom": {
                         "fillOpacity": 30,
                         "gradientMode": "none",
                         "stacking": {
                            "mode": "normal"
                         }
                      },
                      "unit": "Bps"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 12,
                   "x": 0,
                   "y": 16
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "rate(agent_resources_machine_rx_bytes_total{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\"}[$__rate_interval])\n",
                      "instant": false,
                      "legendFormat": "{{instance}}",
                      "range": true
                   }
                ],
                "title": "Network receive bandwidth",
                "type": "timeseries"
             },
             {
                "datasource": "${datasource}",
                "description": "Rate of data sent across all network interfaces for the machine\nGrafana Agent is running on.\n\nData shown here is across all running processes and not exclusive to\nthe running Grafana Agent process.\n",
                "fieldConfig": {
                   "defaults": {
                      "custom": {
                         "fillOpacity": 30,
                         "gradientMode": "none",
                         "stacking": {
                            "mode": "normal"
                         }
                      },
                      "unit": "Bps"
                   }
                },
                "gridPos": {
                   "h": 8,
                   "w": 12,
                   "x": 12,
                   "y": 16
                },
                "targets": [
                   {
                      "datasource": "${datasource}",
                      "expr": "rate(agent_resources_machine_tx_bytes_total{cluster=\"$cluster\",namespace=\"$namespace\",instance=~\"$instance\"}[$__rate_interval])\n",
                      "instant": false,
                      "legendFormat": "{{instance}}",
                      "range": true
                   }
                ],
                "title": "Network send bandwidth",
                "type": "timeseries"
             }
          ],
          "refresh": "10s",
          "schemaVersion": 36,
          "tags": [
             "grafana-agent-flow-mixin"
          ],
          "templating": {
             "list": [
                {
                   "label": "Data Source",
                   "name": "datasource",
                   "query": "prometheus",
                   "refresh": 1,
                   "sort": 2,
                   "type": "datasource"
                },
                {
                   "label": "Loki Data Source",
                   "name": "loki_datasource",
                   "query": "loki",
                   "refresh": 1,
                   "sort": 2,
                   "type": "datasource"
                },
                {
                   "datasource": "${datasource}",
                   "label": "cluster",
                   "name": "cluster",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components, cluster)\n",
                      "refId": "cluster"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                },
                {
                   "datasource": "${datasource}",
                   "label": "namespace",
                   "name": "namespace",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components{cluster=\"$cluster\"}, namespace)\n",
                      "refId": "namespace"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                },
                {
                   "allValue": ".*",
                   "datasource": "${datasource}",
                   "includeAll": true,
                   "label": "instance",
                   "multi": true,
                   "name": "instance",
                   "query": {
                      "query": "label_values(agent_component_controller_running_components{cluster=\"$cluster\", namespace=\"$namespace\"}, instance)\n",
                      "refId": "instance"
                   },
                   "refresh": 2,
                   "sort": 2,
                   "type": "query"
                }
             ]
          },
          "time": {
             "from": "now-1h",
             "to": "now"
          },
          "timepicker": {
             "refresh_intervals": [
                "5s",
                "10s",
                "30s",
                "1m",
                "5m",
                "15m",
                "30m",
                "1h",
                "2h",
                "1d"
             ],
             "time_options": [
                "5m",
                "15m",
                "1h",
                "6h",
                "12h",
                "24h",
                "2d",
                "7d",
                "30d",
                "90d"
             ]
          },
          "timezone": "utc",
          "title": "Grafana Agent Flow / Resources",
          "uid": "d47aae5c53be5550f8e3bc8a904ba61a"
       }
kind: ConfigMap
metadata:
  annotations:
    grafana_dashboard_folder: /dashboards/Agent Flow Mixin
  labels:
    grafana_dashboard: "1"
  name: agent-flow-resources.json
  namespace: monitoring-system
