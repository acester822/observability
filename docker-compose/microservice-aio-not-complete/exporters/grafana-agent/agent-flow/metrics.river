// https://github.com/grafana/agent-configurator

logging {
	level  = "warn"
	format = "logfmt"
}

module.file "docker_compose" {
	filename = env("AGENT_CONFIG_FOLDER") + "/modules/docker_compose.river"

	arguments {
		metrics_endpoint = "http://gateway:8080"
	}
}

discovery.docker "containers" {
	host = "unix:///var/run/docker.sock"

	filter {
		name   = "status"
		values = ["running"]
	}
}

discovery.relabel "containers" {
	targets = discovery.docker.containers.targets

	// filter by service name
	rule {
		source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
		action        = "keep"
		regex         = "(agent|mimir|mimir-.*|grafana|loki|loki-.*|tempo|tempo-.*|pyroscope|distributor|ingester|query-frontend|querier|query-scheduler|store-gateway|alertmanager|compactor|ruler|overrides-exporter)"
	}

	rule {
		source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
		regex         = "(.*)"
		replacement   = "monitoring-system/$1"
		target_label  = "job"
	}

	rule {
		source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
		regex         = "(.*)"
		target_label  = "pod"
	}

	rule {
		source_labels = ["__meta_docker_container_name"]
		regex         = "/(.*)"
		target_label  = "container"
	}
}

/********************************************
 * Metrics
 ********************************************/

prometheus.exporter.unix "containers" {
	set_collectors     = ["cpu"]
	disable_collectors = ["diskstats", "mdadm", "textfile", "hwmon"]
}

prometheus.scrape "integrations" {
	targets = concat(
		prometheus.exporter.unix.containers.targets,
	)
	scrape_interval = "15s"

	clustering {
		enabled = true
	}

	forward_to = [prometheus.relabel.integrations.receiver]
}

prometheus.scrape "containers" {
	targets         = discovery.relabel.containers.output
	scrape_interval = "15s"

	clustering {
		enabled = true
	}

	forward_to = [module.file.docker_compose.exports.metrics_receiver]
}

prometheus.scrape "minio" {
	targets = [{"__address__" = "minio:9000", "job" = "monitoring-system/minio"}]

	scrape_interval = "15s"

	clustering {
		enabled = true
	}
	metrics_path = "/minio/v2/metrics/cluster"

	forward_to = [prometheus.relabel.integrations.receiver]
}

prometheus.relabel "integrations" {
	rule {
		source_labels = ["job"]
		regex         = "(integrations|monitoring-system)/(.*)"
		target_label  = "pod"
		replacement   = "${2}"
	}

	rule {
		source_labels = ["job"]
		regex         = "(integrations|monitoring-system)/(.*)"
		target_label  = "container"
		replacement   = "${2}"
	}

	forward_to = [module.file.docker_compose.exports.metrics_receiver]
}

/********************************************
 * Otelcol for metrics
 ********************************************/

otelcol.receiver.otlp "containers" {
	grpc {
		endpoint = "0.0.0.0:4317"
	}

	http {
		endpoint = "0.0.0.0:4318"
	}

	output {
		metrics = [otelcol.processor.batch.containers.input]
	}
}

otelcol.processor.batch "containers" {
	output {
		metrics = [otelcol.processor.memory_limiter.containers.input]
	}
}

otelcol.processor.memory_limiter "containers" {
	check_interval = "1s"
	limit          = "256MiB"

	output {
		metrics = [otelcol.exporter.prometheus.containers.input]
	}
}

otelcol.exporter.prometheus "containers" {
	forward_to = [module.file.docker_compose.exports.metrics_receiver]
}
