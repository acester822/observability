version: '3.9'


  - path: ../../common/compose-include/agent-collect-traces.yaml #Tempo-Traces
  - path: ../../common/compose-include/minio.yaml
  - path: ../../common/compose-include/agent-collect-logs.yaml #Loki-Logs
  - path: ../../common/compose-include/agent-collect-metrics.yaml #Mimir-Metrics
  
  # Note: 
# include is available in Docker Compose version 2.20 and later, and Docker Desktop version 4.22 and later.
include:
  - path: ../../common/compose-include/minio.yaml
  - path: ../../common/compose-include/agent-collect-profiles.yaml
  # # for git remote  
  # #   https://github.com/docker/compose/pull/10811
  # #   https://docs.docker.com/engine/reference/commandline/build/#git-repositories
  # # - git@github.com:ndeloof/test.git
  # - https://github.com/qclaogui/codelab-monitoring.git#main:docker-compose/common/compose-include/minio.yaml
  # - https://github.com/qclaogui/codelab-monitoring.git#main:docker-compose/common/compose-include/agent-collect-profiles.yaml
  

services:

  agent: # All
    depends_on:
      gateway:
        condition: service_healthy
    image: grafana/agent:v0.37.2
    volumes:
      - ../exporters/grafana-agent/agent-flow:/etc/agent-config
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint:
      - /bin/grafana-agent
      - run
      - /etc/agent-config/
      - --server.http.listen-addr=0.0.0.0:12345
      - --cluster.enabled=true
      - --cluster.join-addresses=grafana-agent-cluster:12345
      - --disable-reporting=true
    environment:
      - AGENT_MODE=flow
      - AGENT_CONFIG_FOLDER=/etc/agent-config
    healthcheck:
      disable: true
    ports:
      - "12345"
    # scale up support
    deploy:
      replicas: 2
    networks:
      default:
        aliases:
          - grafana-agent-cluster

  minio: # All
    image: minio/minio:RELEASE.2023-11-01T01-57-10Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/mimir-data /data/mimir-rules /data/mimir-alertmanager && \
        mkdir -p /data/loki-data /data/loki-rules && \
        mkdir -p /data/tempo-data  && \
        mkdir -p /data/pyroscope-data && \
        minio server /data --console-address ':9001'
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin_password
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
      # - MINIO_PROMETHEUS_URL="http://gateway:8500/prometheus"
      # - MINIO_PROMETHEUS_JOB_ID="integrations/minio"
    volumes:
      - ../Data:/data:delegated
    healthcheck:
      test: ["CMD", "curl","-f","http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "9001:9001"
      


  gateway: #Mimir-Metrics
    depends_on:
      mimir:
        condition: service_healthy
    image: nginxinc/nginx-unprivileged:1.25-alpine
    volumes:
      - ../../common/config/nginx:/etc/nginx/templates
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
      # nginx envsubst does not support default values like Docker Compose do when using ${MY_VAR:-My Default}.
      # so need a full setup of all variables.
      # https://github.com/nginxinc/docker-nginx/issues/592
      # https://stackoverflow.com/a/65529290
      - DISTRIBUTOR_HOST=mimir
      - ALERT_MANAGER_HOST=mimir
      - RULER_HOST=mimir
      - QUERY_FRONTEND_HOST=mimir
      - COMPACTOR_HOST=mimir
      - DISTRIBUTOR_HOST=tempo
      - INGESTER_HOST=tempo
      - QUERY_FRONTEND_HOST=tempo
      - COMPACTOR_HOST=tempo
      - DISTRIBUTOR_HOST=loki
      - INGESTER_HOST=loki
      - RULER_HOST=loki
      - QUERY_FRONTEND_HOST=loki
      - QUERY_SCHEDULER_HOST=loki
      - QUERIER_HOST=loki
      - COMPACTOR_HOST=loki      
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8080"
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "9095:9095" # tempo grpc
      - "4317:4317"  # otlp grpc
      - "4318:4318"  # otlp http
      - "9411:9411"   # zipkin

  gateway: #Loki-Logs
    depends_on:
      loki:
        condition: service_healthy
    image: nginxinc/nginx-unprivileged:1.25-alpine
    volumes:
      - ../../common/config/nginx:/etc/nginx/templates
      - ../../common/config/loki/gateway_loki.conf.template:/etc/nginx/templates/gateway_loki.conf.template
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx

    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "3100"
      


  mimir: #Mimir-Metrics
    depends_on:
      minio:
        condition: service_healthy
    image: grafana/mimir:2.10.3
    command:
      - -config.file=/etc/mimir.yaml
      - -target=all
      - -log.level=error
    volumes:
      - ../../common/config/mimir/monolithic-mode-metrics.yaml:/etc/mimir.yaml # Note: Mimir use monolithic-mode.yaml
    ports:
      - "8080"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # Horizontally scale up support(Monolithic mode)
    # https://grafana.com/docs/mimir/latest/references/architecture/deployment-modes/#monolithic-mode
    deploy:
      replicas: 2
    networks:
      default:
        aliases:
          - mimir-memberlist





  tempo: #Tempo-Traces
    depends_on:
      minio:
        condition: service_healthy
    image: &tempoImage grafana/tempo:2.2.3
    restart: always
    volumes:
      - ./config/tempo/scalable-single-binary.yaml:/etc/tempo.yaml # Note: Tempo use scalable-single-binary.yaml
    command:
      - -config.file=/etc/tempo.yaml
      - -target=scalable-single-binary
      - -log.level=error
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3200/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "3200"
    # Horizontally scale up support(Monolithic mode)
    # https://grafana.com/docs/tempo/latest/setup/deployment/#scaling-monolithic-mode
    deploy:
      replicas: 2
    networks:
      default:
        aliases:
          - tempo-memberlist





  loki: #Loki-Logs
    depends_on:
      minio:
        condition: service_healthy
    image: &lokiImage grafana/loki:2.9.2
    command:
      - -config.file=/etc/loki.yaml
      - -target=all
      - -log.level=error
    volumes:
      - ../../common/config/loki/monolithic-mode-logs.yaml:/etc/loki.yaml
    ports:
      - "3100"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # Horizontally scale up support(Monolithic mode)
    # https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/#simple-scalable-deployment-mode
    deploy:
      replicas: 3
    networks:
      default:
        aliases:
          - loki-memberlist



  pyroscope: #Pyro-Profiles
    image: grafana/pyroscope:1.1.5
    volumes:
      - ../../common/config/pyroscope/monolithic-mode-profiles.yaml:/etc/config.yaml
    command:
      - -config.file=/etc/config.yaml
      - -target=all
      - -log.level=warn
    ports:
      - "4040:4040"
    networks:
      default:
        aliases:
          - gateway

  load-rules-all:
    depends_on:
      loki:
        condition: service_healthy
    image: grafana/mimirtool:2.10.3
    volumes:
      - ../../../monitoring-mixins/loki-mixin/deploy/rules.yaml:/loki-mixin/rules.yaml
      - ../../../monitoring-mixins/loki-mixin/deploy/alerts.yaml:/loki-mixin/alerts.yaml
      - ../../../monitoring-mixins/tempo-mixin/deploy/rules.yaml:/tempo-mixin/rules.yaml
      - ../../../monitoring-mixins/tempo-mixin/deploy/alerts.yaml:/tempo-mixin/alerts.yaml
      - ../../../monitoring-mixins/mimir-mixin/deploy/rules.yaml:/mimir-mixin/rules.yaml
      - ../../../monitoring-mixins/mimir-mixin/deploy/alerts.yaml:/mimir-mixin/alerts.yaml

    environment:
      - MIMIR_ADDRESS=http://mimir:8080
      - MIMIR_TENANT_ID=anonymous
    command: >-
      rules load /loki-mixin/rules.yaml /loki-mixin/alerts.yaml /tempo-mixin/rules.yaml /tempo-mixin/alerts.yaml /mimir-mixin/rules.yaml /mimir-mixin/alerts.yaml

  grafana: #From AIO
    image: grafana/grafana-dev:10.3.0-144189
    command:
      - --config=/etc/grafana-config/grafana.ini
    volumes:
      - ../../common/config/grafana/grafana.ini:/etc/grafana-config/grafana.ini
      - ../../common/config/grafana/dashboards:/var/lib/grafana/dashboards
      - ../../common/config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml #need to make sure this is correct, reference grafana git not the AIO
      - ../../../monitoring-mixins/mimir-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/mimir-mixin  # load mimir dashboards
      - ../../../monitoring-mixins/loki-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/loki-mixin    # load loki dashboards
      - ../../../monitoring-mixins/tempo-mixin/deploy/dashboards_out:/var/lib/grafana/dashboards/tempo-mixin  # load tempo dashboards
    environment:
      - GF_LOG_LEVEL=error
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin_password}
      - GF_FEATURE_TOGGLES_ENABLE=traceToProfiles,traceqlEditor,pyroscopeFlameGraph #should this be just flamegraph?
      - GF_DIAGNOSTICS_PROFILING_ENABLED=true
      - GF_DIAGNOSTICS_PROFILING_ADDR=0.0.0.0
      - GF_DIAGNOSTICS_PROFILING_PORT=6060
      - GF_TRACING_OPENTELEMETRY_OTLP_ADDRESS=agent:4317
      - GF_TRACING_OPENTELEMETRY_CUSTOM_ATTRIBUTES=cluster:docker-compose,namespace:monitoring
      - GF_INSTALL_PLUGINS=pyroscope-panel
    ports:
      - "3000:3000"      
