version: '3.9'

#include:
  #- path: ../smm/common/compose-include/minio.yaml
  #- path: ../smm/common/compose-include/agent-collect-profiles.yaml
  ## for git remote  
  ## - https://github.com/qclaogui/codelab-monitoring.git#main:docker-compose/common/compose-include/minio.yaml
  ## - https://github.com/qclaogui/codelab-monitoring.git#main:docker-compose/common/compose-include/agent-collect-profiles.yaml
  

services:

  agent: # All
    image: grafana/agent:v0.37.2
    depends_on:
      tempo:
        condition: service_started
      mimir:
        condition: service_healthy
      loki:
        condition: service_healthy
    volumes:
      - ../smm/xporters/agent-flow:/etc/agent-config
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint:
      - /bin/grafana-agent
      - run
      - /etc/agent-config/
      - --server.http.listen-addr=0.0.0.0:12345
      - --cluster.enabled=true
      - --cluster.join-addresses=grafana-agent-cluster:12345
      - --disable-reporting=true
    environment:
      - AGENT_MODE=flow
      - AGENT_CONFIG_FOLDER=/etc/agent-config
    healthcheck:
      disable: true
    ports:
      - "12345"
    # scale up support
    deploy:
      replicas: 4
    networks:
      default:
        aliases:
          - grafana-agent-cluster

  gateway: #All
    image: nginxinc/nginx-unprivileged:1.25-alpine
    container_name: gateway
    depends_on:
      tempo:
        condition: service_started
    volumes:
      - ../smm/configs/nginx:/etc/nginx/templates
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
      # nginx envsubst does not support default values like Docker Compose do when using ${MY_VAR:-My Default}.
      # so need a full setup of all variables.
      # https://github.com/nginxinc/docker-nginx/issues/592
      # https://stackoverflow.com/a/65529290
      - DISTRIBUTOR_HOST=mimir
      - QUERY_FRONTEND_HOST=mimir
      - ALERT_MANAGER_HOST=mimir
      - RULER_HOST=mimir
      - COMPACTOR_HOST=mimir
      - LOKI_DISTRIBUTOR_HOST=loki
      - LOKI_INGESTER_HOST=loki
      - LOKI_RULER_HOST=loki
      - LOKI_QUERY_FRONTEND_HOST=loki
      - LOKI_QUERY_SCHEDULER_HOST=loki
      - LOKI_QUERIER_HOST=loki
      - LOKI_COMPACTOR_HOST=loki
      - TEMPO_DISTRIBUTOR_HOST=tempo
      - TEMPO_INGESTER_HOST=tempo
      - TEMPO_QUERY_FRONTEND_HOST=tempo
      - TEMPO_COMPACTOR_HOST=tempo
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8080"    # Mimir
      - "3100:3100"    # Mimir
      - "3200:3200"    # Tempo
      - "9095:9095"    # Tempo GPRC
      - "4317:4317"    # Otlp GPRC
      - "4318:4318"    # Otlp HTTP
      - "9411:9411"    # Zipkin
    networks:
      default:
        aliases:
          - gateway

  mimir: #Mimir-Metrics
    image: grafana/mimir:2.10.3
    depends_on:
      minio:
        condition: service_healthy
    command:
      - -config.file=/etc/mimir/mimir-smm.yml
      - -target=all,alertmanager
      - -log.level=error
    volumes:
      - ../smm/configs/mimir/:/etc
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # Horizontally scale up support(Monolithic mode)
    # https://grafana.com/docs/mimir/latest/references/architecture/deployment-modes/#monolithic-mode
    deploy:
      replicas: 4
    networks:
      default:
        aliases:
          - mimir-memberlist

  loki: #Loki-Logs
    image: &lokiImage grafana/loki:2.9.2
    depends_on:
      minio:
        condition: service_healthy
    command:
      - -config.file=/etc/loki.yaml
      - -target=all
      - -log.level=error
    volumes:
      - ../smm/configs/loki/loki-smm.yml:/etc/loki.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    # Horizontally scale up support(Monolithic mode)
    # https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/#simple-scalable-deployment-mode
    deploy:
      replicas: 4
    networks:
      default:
        aliases:
          - loki-memberlist

  tempo: #Tempo-Traces
    image: &tempoImage grafana/tempo:2.2.3
    depends_on:
      minio:
        condition: service_healthy
    restart: always
    volumes:
      - ../smm/configs/tempo/tempo-smm.yml:/etc/tempo.yaml # Note: Tempo use scalable-single-binary.yaml
    command:
      - -config.file=/etc/tempo.yaml
      - -target=all
      - -log.level=error
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3200/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
     # Horizontally scale up support(Monolithic mode)
     # https://grafana.com/docs/tempo/latest/setup/deployment/#scaling-monolithic-mode
    deploy:
      replicas: 4
    networks:
      default:
        aliases:
          - tempo-memberlist

  pyroscope: #Pyro-Profiles
    image: grafana/pyroscope:1.1.5
    depends_on:
      minio:
        condition: service_healthy
    container_name: pyroscope
    volumes:
      - ../smm/configs/pyro/pyro-smm.yml:/etc/config.yaml
    command:
      - -config.file=/etc/config.yaml
      - -target=all
      - -log.level=warn
    ports:
      - "4040:4040"
    networks:
      default:
        aliases:
          - pyroscope

  minio: # All
    image: minio/minio:RELEASE.2023-07-21T21-12-44Z
    container_name: minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/mimir-data /data/mimir-rules /data/mimir-alertmanager /data/mimir-compactor /data/mimir-ingester && \
        mkdir -p /data/loki-data /data/loki-rules && \
        mkdir -p /data/tempo-data  && \
        mkdir -p /data/pyroscope-data && \
        minio server /data --console-address ':9001'
    environment:
      - MINIO_ROOT_USER=acester822
      - MINIO_ROOT_PASSWORD=228retseca
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
      # - MINIO_PROMETHEUS_URL="http://gateway:8500/prometheus"
      # - MINIO_PROMETHEUS_JOB_ID="integrations/minio"
    volumes:
      - ./Data:/data:delegated
    healthcheck:
      test: ["CMD", "curl","-f","http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "9001:9001"

  load-mimir-rules:
    depends_on:
      tempo:
        condition: service_started
      mimir:
        condition: service_healthy
      loki:
        condition: service_healthy
    image: grafana/mimirtool:2.10.3
    volumes:
      - ../smm/rules-alerts/Mimir/rules.yaml:/mimir-mixin/rules.yaml
      - ../smm/rules-alerts/Mimir/alerts.yaml:/mimir-mixin/alerts.yaml
    environment:
      - MIMIR_ADDRESS=http://gateway:8080
      - MIMIR_TENANT_ID=anonymous
    command: >-
      rules load /mimir-mixin/rules.yaml /mimir-mixin/alerts.yaml

  load-loki-rules:
    depends_on:
      tempo:
        condition: service_started
      mimir:
        condition: service_healthy
      loki:
        condition: service_healthy
    image: grafana/mimirtool:2.10.3
    volumes:
      - ../smm/rules-alerts/Loki/rules.yaml:/loki-mixin/rules.yaml
      - ../smm/rules-alerts/Loki/alerts.yaml:/loki-mixin/alerts.yaml
    environment:
      - MIMIR_ADDRESS=http://gateway:8080
      - MIMIR_TENANT_ID=anonymous
    command: >-
      rules load /loki-mixin/rules.yaml /loki-mixin/alerts.yaml

  load-tempo-rules:
    depends_on:
      tempo:
        condition: service_started
      mimir:
        condition: service_healthy
      loki:
        condition: service_healthy
    image: grafana/mimirtool:2.10.3
    volumes:
      - ../smm/rules-alerts/Tempo/rules.yaml:/tempo-mixin/rules.yaml
      - ../smm/rules-alerts/Tempo/alerts.yaml:/tempo-mixin/alerts.yaml
    environment:
      - MIMIR_ADDRESS=http://gateway:8080
      - MIMIR_TENANT_ID=anonymous
    command: >-
      rules load /tempo-mixin/rules.yaml /tempo-mixin/alerts.yaml
      
  load-agent-rules:
    depends_on:
      tempo:
        condition: service_started
      mimir:
        condition: service_healthy
      loki:
        condition: service_healthy
    image: grafana/mimirtool:2.10.3
    volumes:
      - ../smm/rules-alerts/Agent/rules.yaml:/agent-mixin/rules.yaml
      - ../smm/rules-alerts/Agent/alerts.yaml:/agent-mixin/alerts.yaml
    environment:
      - MIMIR_ADDRESS=http://gateway:8080
      - MIMIR_TENANT_ID=anonymous
    command: >-
      rules load /agent-mixin/rules.yaml /agent-mixin/alerts.yaml

  grafana: #From AIO
    image: grafana/grafana-dev:10.3.0-144189
    container_name: grafana
    command:
      - --config=/etc/grafana-config/grafana.ini
    volumes:
      - ../smm/configs/grafana/grafana.ini:/etc/grafana-config/grafana.ini
      - ../smm/configs/grafana/dashboards:/var/lib/grafana/dashboards
      - ../smm/configs/grafana/provisioning:/etc/grafana/provisioning
      - ../smm/configs/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_LOG_LEVEL=error
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin_password}
      - GF_FEATURE_TOGGLES_ENABLE=traceToProfiles,traceqlEditor,FlameGraph #should this be just flamegraph?
      - GF_DIAGNOSTICS_PROFILING_ENABLED=true
      - GF_DIAGNOSTICS_PROFILING_ADDR=0.0.0.0
      - GF_DIAGNOSTICS_PROFILING_PORT=6060
      - GF_TRACING_OPENTELEMETRY_OTLP_ADDRESS=agent:4317
      - GF_TRACING_OPENTELEMETRY_CUSTOM_ATTRIBUTES=cluster:docker-compose,namespace:monitoring
      - GF_INSTALL_PLUGINS=pyroscope-panel
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.grafana.rule=Host(`grafana.freetherabbit.xyz`)'
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.routers.grafana.middlewares=traefik-forward-auth"
      - "traefik.docker.network=utilities"
    ports:
      - "3000:3000"
